// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package server

import (
	"context"
	"github.com/michalsciubidlo/vodeno-task/pkg/customermailing"
	"sync"
)

// Ensure, that serviceMock does implement service.
// If this is not the case, regenerate this file with moq.
var _ service = &serviceMock{}

// serviceMock is a mock implementation of service.
//
//	func TestSomethingThatUsesservice(t *testing.T) {
//
//		// make and configure a mocked service
//		mockedservice := &serviceMock{
//			AddFunc: func(ctx context.Context, msg customermailing.MailingMessage) error {
//				panic("mock out the Add method")
//			},
//			DeleteFunc: func(ctx context.Context, mailingID int) error {
//				panic("mock out the Delete method")
//			},
//			SendFunc: func(ctx context.Context, mailingID int) error {
//				panic("mock out the Send method")
//			},
//		}
//
//		// use mockedservice in code that requires service
//		// and then make assertions.
//
//	}
type serviceMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(ctx context.Context, msg customermailing.MailingMessage) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, mailingID int) error

	// SendFunc mocks the Send method.
	SendFunc func(ctx context.Context, mailingID int) error

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Msg is the msg argument value.
			Msg customermailing.MailingMessage
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MailingID is the mailingID argument value.
			MailingID int
		}
		// Send holds details about calls to the Send method.
		Send []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MailingID is the mailingID argument value.
			MailingID int
		}
	}
	lockAdd    sync.RWMutex
	lockDelete sync.RWMutex
	lockSend   sync.RWMutex
}

// Add calls AddFunc.
func (mock *serviceMock) Add(ctx context.Context, msg customermailing.MailingMessage) error {
	if mock.AddFunc == nil {
		panic("serviceMock.AddFunc: method is nil but service.Add was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Msg customermailing.MailingMessage
	}{
		Ctx: ctx,
		Msg: msg,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(ctx, msg)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedservice.AddCalls())
func (mock *serviceMock) AddCalls() []struct {
	Ctx context.Context
	Msg customermailing.MailingMessage
} {
	var calls []struct {
		Ctx context.Context
		Msg customermailing.MailingMessage
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *serviceMock) Delete(ctx context.Context, mailingID int) error {
	if mock.DeleteFunc == nil {
		panic("serviceMock.DeleteFunc: method is nil but service.Delete was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MailingID int
	}{
		Ctx:       ctx,
		MailingID: mailingID,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, mailingID)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedservice.DeleteCalls())
func (mock *serviceMock) DeleteCalls() []struct {
	Ctx       context.Context
	MailingID int
} {
	var calls []struct {
		Ctx       context.Context
		MailingID int
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Send calls SendFunc.
func (mock *serviceMock) Send(ctx context.Context, mailingID int) error {
	if mock.SendFunc == nil {
		panic("serviceMock.SendFunc: method is nil but service.Send was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MailingID int
	}{
		Ctx:       ctx,
		MailingID: mailingID,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	return mock.SendFunc(ctx, mailingID)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//
//	len(mockedservice.SendCalls())
func (mock *serviceMock) SendCalls() []struct {
	Ctx       context.Context
	MailingID int
} {
	var calls []struct {
		Ctx       context.Context
		MailingID int
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}
